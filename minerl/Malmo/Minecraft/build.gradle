
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


apply plugin: 'java'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=sodium.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=sodium.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.22'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compileOnly fg.deobf(project.dependencies.create("com.feed_the_beast.mods:ftb-chunks:${ftb_chunks_version}") {
        transitive = false
    })
}


// Read the version number from the Mod's version properties file.
if (!file('src/main/resources/version.properties').exists()) {
    ant.fail("version.properties file is missing - this is created automatically by CMake. If you are building from source, make sure you have built the full source tree, not just the Minecraft folder.")
}
def propFile = file('src/main/resources/version.properties')
def versionProp = new Properties()
versionProp.load(propFile.newReader())
version = versionProp['malmomod.version']

group= "com.microsoft.MalmoMod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MalmoMod"


afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "sodium",
                //"Specification-Vendor": "examplemodsareus",
                "Specification-Version": project.version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                //"Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.malmomod.refmap.json"
        ])
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "mixins.malmomod.refmap.json"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

if (JavaVersion.current().isJava8Compatible())
{
    allprojects
    {
        tasks.withType(Javadoc)
        {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// Mixin stuff.

sourceSets {
    main {
        ext.refMap = "mixins.malmomod.refmap.json"
    }
}



task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'build'
}

setupDecompWorkspace.dependsOn copySrg
setupDevWorkspace.dependsOn copySrg
project.tasks.idea.dependsOn copySrg


// Mixin uses multiple HashMaps to generate the refmap.
// HashMaps are unordered collections and as such do not produce deterministic output.
// To fix that, we simply sort the refmap json file.
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
compileJava.doLast {
    File refmapFile =  compileJava.ext.refMapFile 
    if (refmapFile.exists()) {
        def ordered
        ordered = {
            if (it instanceof Map) {
                def sorted = new TreeMap(it)
                sorted.replaceAll { k, v -> ordered(v) }
                sorted
            } else if (it instanceof List) {
                it.replaceAll { v -> ordered(v) }
            } else {
                it
            }
        }
        def json = JsonOutput.toJson(ordered(new JsonSlurper().parse(refmapFile)))
        refmapFile.withWriter { it.write json }
    }
}

// -------------- Task 'jaxb' runs xjc to make java files from XSD files --------------------

gradle.projectsEvaluated {
    // compileJava target isn't available until after forge has initialized things
    compileJava.dependsOn copySrg
    compileJava.dependsOn jaxb
    compileJava.dependsOn copyModToClient
    compileJava.dependsOn copyModToServer
    jaxb.dependsOn copySchemas
    copySchemas.dependsOn deleteSchemas
}

configurations {
    jaxb
}

dependencies {
    jaxb group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
}

task copySchemas(type: Copy) {
    from '../Schemas/'
    into 'src/main/resources/'
    include ('*.xsd')
}

task jaxb() {
    description 'Generate source files for our XML schemas using JAXB'

    // Create an index file listing all the schemas:
    def schemaIndexFile = new File('src/main/resources/schemas.index')
    def contents = ""
    def tree = copySchemas.source
    tree.visit { fileDetails ->
        contents += "${fileDetails.relativePath}" + "\n"
    }
    schemaIndexFile.write contents

    inputs.files fileTree( dir: 'src/main/resources', include:'*.xsd' )
    outputs.dir 'src/main/java/com/microsoft/Malmo/Schemas'
    
    doLast {
        // first clear the old .java files out of the folder in case some are no longer current
        delete fileTree(dir: 'src/main/java/com/microsoft/Malmo/Schemas', include: '*.java')

        // use xjc to generate java files from the XML schema
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
        ant.xjc( destdir: 'src/main/java', package: 'com.microsoft.Malmo.Schemas' )
        {
            schema( dir: 'src/main/resources', includes: '*.xsd' )
        }
    }
}

task deleteSchemas() {
    doLast {
        // first clear the old .xsd files out of the folder in case some are no longer current
        delete fileTree(dir: 'src/main/resources', include: '*.xsd')
    }
}

// -------------- Task 'copyMds' copied the .md files into the javadoc folder --------------------

task copyMds(type: Copy) {
    from 'src/main/java/'
    into 'build/docs/javadoc'
    include ('**/*.md')
}

// -------------- Task 'copyMod' copies the Mod file into the Minecraft client and server mods folders --------------------

task copyModToClient(type: Copy) {
    from 'build/libs/'
    into '../Minecraft/.minecraft/mods'
    include ('*.jar')
}

task copyModToServer(type: Copy) {
    from 'build/libs/'
    into '../Minecraft/.minecraftserver/mods'
    include ('*.jar')
}

// Interesting. We've packaged forge gradle into the full jar and use gradle inherently??
shadowJar {
    classifier = 'fat'
    configurations = [project.configurations.all]
    manifest {
        attributes "Main-Class": "com.microsoft.Malmo.Launcher.GradleStart"
    }
}

javadoc.dependsOn copyMds
